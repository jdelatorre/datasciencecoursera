"heart attack" = 11
"heart failure" = 17
"Pneumonia" = 23
## Return hospital name in that state with lowest 30-day death
return(outcome)
result <- which.min(stateresult_data[,outcome])
## rate
return(result[[,2]])
}
best("CA", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
"heart attack" = 11
"heart failure" = 17
"Pneumonia" = 23
## Return hospital name in that state with lowest 30-day death
return(outcome)
result <- which.min(stateresult_data[,outcome])
## rate
return(result[,2])
}
best("CA", "heart attack")
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
"heart attack" = 11
"heart failure" = 17
"Pneumonia" = 23
## Return hospital name in that state with lowest 30-day death
return(outcome)
result <- which.min(stateresult_data[,outcome])
result
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
"heart attack" = 11
"heart failure" = 17
"Pneumonia" = 23
## Return hospital name in that state with lowest 30-day death
return(outcome)
result <- which.min(stateresult_data[,11])
result
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(stateresult_data[,11])
result
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
result
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
return(result)
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data$11)
return(result)
## rate
return(result[,2])
}
?which.min
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
return(state_data[result,])
## rate
return(result[,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
tx_data <- subset(data, "State" = "TX")
min(tx_data[,11])
?min
which.min(tx_data[,11])
data.frame(subset(data, 2 == "Cypress Fairbanks Medical Center"))
data.frame(subset(data, "2" == "Cypress Fairbanks Medical Center"))
subset(data, "2" == "Cypress Fairbanks Medical Center")
?subset
subset(data, "Hospital.Name" == "Cypress Fairbanks Medical Center")
subset(data, "Hospital.Name" == "Cypress Fairbanks Medical Center", 11)
subset(tx_data, "Hospital.Name" == "Cypress Fairbanks Medical Center", 11)
data["Cypress Fairbanks Medical Center"]
data[2 == "Cypress Fairbanks Medical Center"]
data[4706]
data[4706,]
test <- subset(data, "Hospital.Name" == "Cypress Fairbanks Medical Center", 11)
test
test <- subset(data, "Hospital.Name" == "Cypress Fairbanks Medical Center")
test
?read.csv
data[4706]
data[4706,]
data["Cypress Fairbanks Medical Center"]
data[2 =="Cypress Fairbanks Medical Center"]
data[2 == "Cypress Fairbanks Medical Center"]
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
summary(state_data)
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
summary(state_data)
}
best("TX", "heart attack")
?subset
state_data
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
summary(state_data)
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
summary(data)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
summary(data)
data <- data.frame(read.csv("outcome-of-care-measures.csv"))
data
summary(data)
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
summary(state_data)
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state)
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state,)
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state,)
summary(state_data)}
best("TX", "heart attack")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
summary(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11]
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state,)
state_data}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable input
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state,)
state_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, "State" = state,)
state_data[,7]}
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
data <- data[c(2, 7, 11, 17, 23)]
summary(data)}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, State = state)
state_data[,7]}
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
state_data <- subset(data, State = state)
state_data[,7]}
best("TX", "heart attack")
?xtfrm
str(outcome)
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- subset(data, State = state, select = 1:46)
bystate_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- data[ data$State == state]
subset(data, State = state, select = 1:46)
bystate_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- data[data$State == state]
bystate_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- data.frame(data[data$State == state])
bystate_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- subset(data, "State" = state, select = 1:46)
bystate_data[,7]}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- subset(data, "State" = state, select = 1:46)
## Return hospital name in that state with lowest 30-day death
result <- min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- subset(data, "State" = state, select = 1:46)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
return(state_data[result,2])
}
best <- function(state, outcome) {
## Read outcome datahead and create lists of acceptable inputs
data <- data.frame(read.csv("outcome-of-care-measures.csv", colClasses = "character"))
state_list <- unique(data$State)
oc_list <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, state_list) == FALSE) { stop("invalid state")}
if (is.element(outcome, oc_list) == FALSE) { stop("invalid outcome")}
bystate_data <- subset(data, "State" = state, select = 1:46)
## Return hospital name in that state with lowest 30-day death
result <- which.min(state_data[,11])
return(state_data[result,2])
}
best("TX", "heart attack")
